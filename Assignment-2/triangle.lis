     1                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     2                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     3                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     4                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     5                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     6                                  
     7                                  ;Author info
     8                                  ;   Name: Aaron Cope
     9                                  ;   Email: apc42190@csu.fullerton.edu
    10                                  ;
    11                                  ;Program info
    12                                  ;   Name: Float I/O
    13                                  ;   Programming Language: X86_64 and C
    14                                  ;   Date Written: August 31, 2021
    15                                  ;   Date of Last Update: September 18, 2021
    16                                  ;   Status: Completed
    17                                  ;   Files needed for complete program:
    18                                  ;       triangle.asm
    19                                  ;       pythagoras.c
    20                                  ;   References: 
    21                                  ;       Seyfarth: Chapter 11
    22                                  ;       Floyd Holliday
    23                                  ;
    24                                  ;Purpose: This program demonstrates the input, output, and manipulation(addition, division, multiplication, sqrt) of
    25                                  ;   64 bit floating point numbers in assembly as well as the use of xmm/SSE registers
    26                                  ;
    27                                  ;Translator information
    28                                  ;  Linux: nasm -f elf64 -l triangle.lis -o triangle.o triangle.asm
    29                                  ;
    30                                  ;File info:
    31                                  ;   Name: triangle.asm
    32                                  ;   Language: X86_64 Assembly with Intel syntax
    33                                  
    34                                  
    35                                  
    36                                  extern strlen
    37                                  extern stdin
    38                                  extern scanf
    39                                  extern fgets
    40                                  extern printf
    41                                  
    42                                  
    43                                  global triangle
    44                                  
    45                                  ;Defining the max length of user inputs
    46                                  max_name_size equ 1024
    47                                  max_title_size equ 1024
    48                                  max_side_size equ 6
    49                                  two_point_zero equ 0x4000000000000000
    50                                  
    51                                  
    52                                  section .data
    53                                  
    54                                      ;Creating the arrays to hold user prompts and program responses
    55 00000000 506C6561736520656E-         promt_name db "Please enter your last name (20 byte limit): ", 0
    55 00000009 74657220796F757220-
    55 00000012 6C617374206E616D65-
    55 0000001B 202832302062797465-
    55 00000024 206C696D6974293A20-
    55 0000002D 00                 
    56 0000002E 506C6561736520656E-         prompt_title db "Please enter a title (Mr, Ms, Mrs, Master, etc): ", 0
    56 00000037 746572206120746974-
    56 00000040 6C6520284D722C204D-
    56 00000049 732C204D72732C204D-
    56 00000052 61737465722C206574-
    56 0000005B 63293A2000         
    57 00000060 506C6561736520656E-         prompt_sides db "Please enter the sides of your triangle separated by an enter: ", 0
    57 00000069 746572207468652073-
    57 00000072 69646573206F662079-
    57 0000007B 6F757220747269616E-
    57 00000084 676C65207365706172-
    57 0000008D 617465642062792061-
    57 00000096 6E20656E7465723A20-
    57 0000009F 00                 
    58 000000A0 546865206172656120-         print_area db "The area of your triangle is %1.8lf square units", 10, 0
    58 000000A9 6F6620796F75722074-
    58 000000B2 7269616E676C652069-
    58 000000BB 732025312E386C6620-
    58 000000C4 73717561726520756E-
    58 000000CD 6974730A00         
    59 000000D2 546865206C656E6774-         print_len db "The length of the hypotenuse is %1.8lf units", 10, 0
    59 000000DB 68206F662074686520-
    59 000000E4 6879706F74656E7573-
    59 000000ED 652069732025312E38-
    59 000000F6 6C6620756E6974730A-
    59 000000FF 00                 
    60 00000100 506C6561736520656E-         conclude db "Please enjoy your triangles ", 0
    60 00000109 6A6F7920796F757220-
    60 00000112 747269616E676C6573-
    60 0000011B 2000               
    61 0000011D 257300                      string_format db "%s", 0
    62 00000120 256C6600                    float_format db "%lf", 0
    63                                  
    64                                  
    65                                  section .bss
    66                                  
    67                                      ;reserve space for user responses
    68 00000000 <res 00000400>              name resb max_name_size
    69 00000400 <res 00000400>              title resb max_name_size
    70 00000800 <res 00000006>              side_a resb max_side_size
    71 00000806 <res 00000006>              side_b resb max_side_size
    72                                  
    73                                  
    74                                  section .text
    75                                  triangle:
    76                                  
    77                                      ;prolog: Backing up general purpose registers
    78 00000000 55                          push rbp
    79 00000001 4889E5                      mov rbp, rsp
    80 00000004 53                          push rbx
    81 00000005 51                          push rcx
    82 00000006 52                          push rdx
    83 00000007 57                          push rdi
    84 00000008 56                          push rsi
    85 00000009 4150                        push r8
    86 0000000B 4151                        push r9
    87 0000000D 4152                        push r10
    88 0000000F 4153                        push r11
    89 00000011 4154                        push r12
    90 00000013 4155                        push r13
    91 00000015 4156                        push r14
    92 00000017 4157                        push r15
    93 00000019 9C                          pushf
    94                                  
    95                                  
    96 0000001A 48BF-                       mov rdi, string_format          ;pass string_format to printf
    96 0000001C [1D01000000000000] 
    97 00000024 48BE-                       mov rsi, promt_name             ;ask user for last name
    97 00000026 [0000000000000000] 
    98 0000002E E8(00000000)                call printf  
    99                                  
   100 00000033 48BF-                       mov rdi, name                   ;retrieve user input and store in "name" array
   100 00000035 [0000000000000000] 
   101 0000003D BE00040000                  mov rsi, max_name_size          ;max number of characters
   102 00000042 488B1425[00000000]          mov rdx, [stdin]                ;pass standard input to fgets
   103 0000004A E8(00000000)                call fgets
   104                                  
   105 0000004F 48BF-                       mov rdi, string_format          
   105 00000051 [1D01000000000000] 
   106 00000059 48BE-                       mov rsi, prompt_title           ;ask user for title
   106 0000005B [2E00000000000000] 
   107 00000063 E8(00000000)                call printf
   108                                  
   109 00000068 48BF-                       mov rdi, title                  ;retrieve user input and store in "title" array
   109 0000006A [0004000000000000] 
   110 00000072 BE00040000                  mov rsi, max_title_size         ;max number of title characters
   111 00000077 488B1425[00000000]          mov rdx, [stdin]                ;pass standard input to fgets
   112 0000007F E8(00000000)                call fgets
   113                                  
   114                                      ;Ask for side lengths
   115 00000084 48BF-                       mov rdi, string_format          ;string format for argument 1 of printf
   115 00000086 [1D01000000000000] 
   116 0000008E 48BE-                       mov rsi, prompt_sides           ;prompt user for sides of triangle
   116 00000090 [6000000000000000] 
   117 00000098 E8(00000000)                call printf
   118                                      
   119                                      ;retrieve side 1
   120 0000009D 6A00                        push qword 0                    ;align stack on a 0
   121 0000009F 6A00                        push qword 0
   122 000000A1 B800000000                  mov qword rax, 0
   123 000000A6 48BF-                       mov rdi, float_format  
   123 000000A8 [2001000000000000] 
   124 000000B0 4889E6                      mov rsi, rsp                    ;pass top of stack to scanf
   125 000000B3 E8(00000000)                call scanf
   126 000000B8 F20F103424                  movsd xmm6, [rsp]               ;store retrieved float(side 1) in xmm6
   127 000000BD 58                          pop rax 
   128 000000BE 58                          pop rax
   129                                  
   130                                      ;retrieve side 2 the same as side
   131 000000BF 6A00                        push qword 0
   132 000000C1 6A00                        push qword 0
   133 000000C3 B800000000                  mov qword rax, 0
   134 000000C8 48BF-                       mov rdi, float_format
   134 000000CA [2001000000000000] 
   135 000000D2 4889E6                      mov rsi, rsp
   136 000000D5 E8(00000000)                call scanf
   137 000000DA F20F103C24                  movsd xmm7, [rsp]               ;store retrieved float(side 2) in xmm5
   138 000000DF 58                          pop rax 
   139 000000E0 58                          pop rax
   140                                      
   141 000000E1 F2440F10C6                  movsd xmm8, xmm6                ;make copy of side 1
   142 000000E6 F2440F10CF                  movsd xmm9, xmm7                ;make copy of side 2
   143                                      
   144                                      ;Find are of triangle
   145 000000EB F20F59F7                    mulsd xmm6, xmm7                ;base * height; multiply side 1 and side 2 and store it in xmm0
   146 000000EF 49BF00000000000000-         mov r15, two_point_zero         ;put 2.0 in r15
   146 000000F8 40                 
   147 000000F9 4157                        push r15                        ;put r15 on the top of the stack
   148 000000FB F20F5E3424                  divsd xmm6, [rsp]               ;base * height / 2; calculate area of triangle
   149 00000100 415F                        pop r15
   150                                  
   151                                      ;printing area of triangle results
   152 00000102 F20F10C6                    movsd xmm0, xmm6
   153 00000106 B801000000                  mov rax, 1                      ;one float will be printed
   154 0000010B 48BF-                       mov rdi, print_area
   154 0000010D [A000000000000000] 
   155 00000115 E8(00000000)                call printf
   156                                  
   157                                      ;Calculate hypotenuse
   158 0000011A F2450F59C0                  mulsd xmm8, xmm8                ;square side 1
   159 0000011F F2450F59C9                  mulsd xmm9, xmm9                ;square side 2
   160 00000124 F2450F58C1                  addsd xmm8, xmm9                ;add side 1 squared to side 2 squared and store it in xmm8
   161 00000129 F2450F51C0                  sqrtsd xmm8, xmm8               ;calculate square root/hypotenuse
   162                                  
   163                                      ;Printing value of hypotenuse
   164 0000012E F2410F10C0                  movsd xmm0, xmm8                ;place value of hypotenuse in xmm0 to be printed
   165 00000133 B801000000                  mov rax, 1                      ;1 mxx register to be printed
   166 00000138 48BF-                       mov rdi, print_len
   166 0000013A [D200000000000000] 
   167 00000142 E8(00000000)                call printf
   168                                  
   169                                      ;Print enjoy triangles
   170 00000147 48BF-                       mov rdi, string_format
   170 00000149 [1D01000000000000] 
   171 00000151 48BE-                       mov rsi, conclude
   171 00000153 [0001000000000000] 
   172 0000015B E8(00000000)                call printf
   173                                  
   174                                      ;calculates length of "title" string using strlen and stores length in r13 register
   175 00000160 B800000000                  mov qword rax, 0
   176 00000165 48BF-                       mov rdi, title
   176 00000167 [0004000000000000] 
   177 0000016F E8(00000000)                call strlen
   178 00000174 4989C5                      mov r13, rax
   179                                      
   180                                      ;Print title without newline character
   181 00000177 48BF-                       mov rdi, string_format
   181 00000179 [1D01000000000000] 
   182 00000181 48BE-                       mov rsi, title
   182 00000183 [0004000000000000] 
   183 0000018B 42C6442EFF20                mov byte [rsi + r13 - 1], " "           ;replaces newline character with space
   184 00000191 E8(00000000)                call printf
   185                                  
   186                                      ;stores length of "name" array in r13
   187 00000196 48BF-                       mov rdi, name
   187 00000198 [0000000000000000] 
   188 000001A0 E8(00000000)                call strlen
   189 000001A5 4989C5                      mov r13, rax
   190                                  
   191                                      ;print name inline with title
   192 000001A8 48BF-                       mov rdi, string_format
   192 000001AA [1D01000000000000] 
   193 000001B2 48BE-                       mov rsi, name                           ;print name inputted by user
   193 000001B4 [0000000000000000] 
   194 000001BC 42C6442EFF2E                mov byte [rsi + r13 - 1], "."           ;replace newline character with '.'
   195 000001C2 E8(00000000)                call printf
   196                                  
   197 000001C7 F2410F10C0                  movsd xmm0, xmm8           
   198                                      
   199                                  
   200                                  
   201                                  
   202                                      ;epilog: returns stack to state prior to the assembly fuction
   203 000001CC 9D                          popf
   204 000001CD 415F                        pop r15
   205 000001CF 415E                        pop r14
   206 000001D1 415D                        pop r13
   207 000001D3 415C                        pop r12
   208 000001D5 415B                        pop r11
   209 000001D7 415A                        pop r10
   210 000001D9 4159                        pop r9
   211 000001DB 4158                        pop r8
   212 000001DD 5E                          pop rsi
   213 000001DE 5F                          pop rdi
   214 000001DF 5A                          pop rdx
   215 000001E0 59                          pop rcx
   216 000001E1 5B                          pop rbx
   217 000001E2 5D                          pop rbp
   218                                  
   219                                      ;end of assembly function
   220 000001E3 C3                          ret
