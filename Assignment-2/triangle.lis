     1                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     2                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     3                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     4                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     5                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     6                                  
     7                                  ;Author info
     8                                  ;   Name: Aaron Cope
     9                                  ;   Email: apc42190@csu.fullerton.edu
    10                                  ;
    11                                  ;Program info
    12                                  ;   Name: Float I/O
    13                                  ;   Programming Language: X86_64 and C
    14                                  ;   Date Written: August 31, 2021
    15                                  ;
    16                                  ;Translator information
    17                                  ;  Linux: nasm -f elf64 -l triangle.lis -o triangle.o triangle.asm
    18                                  
    19                                  
    20                                  extern strlen
    21                                  extern stdin
    22                                  extern scanf
    23                                  extern fgets
    24                                  extern printf
    25                                  extern strtod
    26                                  
    27                                  
    28                                  global triangle
    29                                  
    30                                  ;Defining the max length of user inputs
    31                                  max_name_size equ 20
    32                                  max_title_size equ 10
    33                                  max_side_size equ 6
    34                                  two_point_zero equ 0x4000000000000000
    35                                  
    36                                  
    37                                  section .data
    38                                  
    39                                      ;Creating the arrays to hold user prompts and program responses
    40 00000000 506C6561736520656E-         promt_name db "Please enter your last name (20 byte limit): ", 0
    40 00000009 74657220796F757220-
    40 00000012 6C617374206E616D65-
    40 0000001B 202832302062797465-
    40 00000024 206C696D6974293A20-
    40 0000002D 00                 
    41 0000002E 506C6561736520656E-         prompt_title db "Please enter a title (Mr, Ms, Mrs, Master, etc): ", 0
    41 00000037 746572206120746974-
    41 00000040 6C6520284D722C204D-
    41 00000049 732C204D72732C204D-
    41 00000052 61737465722C206574-
    41 0000005B 63293A2000         
    42 00000060 506C6561736520656E-         prompt_sides db "Please enter the sides of your triangle separated by an enter: ", 0
    42 00000069 746572207468652073-
    42 00000072 69646573206F662079-
    42 0000007B 6F757220747269616E-
    42 00000084 676C65207365706172-
    42 0000008D 617465642062792061-
    42 00000096 6E20656E7465723A20-
    42 0000009F 00                 
    43 000000A0 546865206172656120-         print_area db "The area of your triangle is %1.8lf square units", 10, 0
    43 000000A9 6F6620796F75722074-
    43 000000B2 7269616E676C652069-
    43 000000BB 732025312E386C6620-
    43 000000C4 73717561726520756E-
    43 000000CD 6974730A00         
    44 000000D2 546865206C656E6774-         print_len db "The length of the hypotenuse is %1.8lf units", 10, 0
    44 000000DB 68206F662074686520-
    44 000000E4 6879706F74656E7573-
    44 000000ED 652069732025312E38-
    44 000000F6 6C6620756E6974730A-
    44 000000FF 00                 
    45 00000100 506C6561736520656E-         conclude db "Please enjoy your triangles ", 0
    45 00000109 6A6F7920796F757220-
    45 00000112 747269616E676C6573-
    45 0000011B 2000               
    46 0000011D 257300                      string_format db "%s", 0
    47 00000120 256C6600                    float_format db "%lf", 0
    48                                  
    49                                  
    50                                  section .bss
    51                                  
    52                                      ;reserve space for user responses
    53 00000000 <res 00000014>              name resb max_name_size
    54 00000014 <res 00000014>              title resb max_name_size
    55 00000028 <res 00000006>              side_a resb max_side_size
    56 0000002E <res 00000006>              side_b resb max_side_size
    57                                  
    58                                  
    59                                  section .text
    60                                  triangle:
    61                                  
    62                                      ;prolog: Backing up general purpose registers
    63 00000000 55                          push rbp
    64 00000001 4889E5                      mov rbp, rsp
    65 00000004 53                          push rbx
    66 00000005 51                          push rcx
    67 00000006 52                          push rdx
    68 00000007 57                          push rdi
    69 00000008 56                          push rsi
    70 00000009 4150                        push r8
    71 0000000B 4151                        push r9
    72 0000000D 4152                        push r10
    73 0000000F 4153                        push r11
    74 00000011 4154                        push r12
    75 00000013 4155                        push r13
    76 00000015 4156                        push r14
    77 00000017 4157                        push r15
    78 00000019 9C                          pushf
    79                                  
    80                                  
    81 0000001A 48BF-                       mov rdi, string_format          ;pass string_format to printf
    81 0000001C [1D01000000000000] 
    82 00000024 48BE-                       mov rsi, promt_name             ;ask user for last name
    82 00000026 [0000000000000000] 
    83 0000002E E8(00000000)                call printf  
    84                                  
    85 00000033 48BF-                       mov rdi, name                   ;retrieve user input and store in "name" array
    85 00000035 [0000000000000000] 
    86 0000003D BE14000000                  mov rsi, max_name_size          ;max number of characters
    87 00000042 488B1425[00000000]          mov rdx, [stdin]                ;pass standard input to fgets
    88 0000004A E8(00000000)                call fgets
    89                                  
    90 0000004F 48BF-                       mov rdi, string_format          
    90 00000051 [1D01000000000000] 
    91 00000059 48BE-                       mov rsi, prompt_title           ;ask user for title
    91 0000005B [2E00000000000000] 
    92 00000063 E8(00000000)                call printf
    93                                  
    94 00000068 48BF-                       mov rdi, title                  ;retrieve user input and store in "title" array
    94 0000006A [1400000000000000] 
    95 00000072 BE0A000000                  mov rsi, max_title_size         ;max number of title characters
    96 00000077 488B1425[00000000]          mov rdx, [stdin]                ;pass standard input to fgets
    97 0000007F E8(00000000)                call fgets
    98                                  
    99                                      ;Ask for side lengths
   100 00000084 48BF-                       mov rdi, string_format          ;string format for argument 1 of printf
   100 00000086 [1D01000000000000] 
   101 0000008E 48BE-                       mov rsi, prompt_sides           ;prompt user for sides of triangle
   101 00000090 [6000000000000000] 
   102 00000098 E8(00000000)                call printf
   103                                      
   104                                      ;retrieve side 1
   105 0000009D 6A00                        push qword 0                    ;align stack on a 0
   106 0000009F 6A00                        push qword 0
   107 000000A1 B800000000                  mov qword rax, 0
   108 000000A6 48BF-                       mov rdi, float_format  
   108 000000A8 [2001000000000000] 
   109 000000B0 4889E6                      mov rsi, rsp                    ;pass top of stack to scanf
   110 000000B3 E8(00000000)                call scanf
   111 000000B8 F20F103424                  movsd xmm6, [rsp]               ;store retrieved float(side 1) in xmm6
   112 000000BD 58                          pop rax 
   113 000000BE 58                          pop rax
   114                                  
   115                                      ;retrieve side 2 the same as side
   116 000000BF 6A00                        push qword 0
   117 000000C1 6A00                        push qword 0
   118 000000C3 B800000000                  mov qword rax, 0
   119 000000C8 48BF-                       mov rdi, float_format
   119 000000CA [2001000000000000] 
   120 000000D2 4889E6                      mov rsi, rsp
   121 000000D5 E8(00000000)                call scanf
   122 000000DA F20F103C24                  movsd xmm7, [rsp]               ;store retrieved float(side 2) in xmm5
   123 000000DF 58                          pop rax 
   124 000000E0 58                          pop rax
   125                                      
   126 000000E1 F2440F10C6                  movsd xmm8, xmm6                ;make copy of side 1
   127 000000E6 F2440F10CF                  movsd xmm9, xmm7                ;make copy of side 2
   128                                      
   129                                      ;Find are of triangle
   130 000000EB F20F59F7                    mulsd xmm6, xmm7                ;base * height; multiply side 1 and side 2 and store it in xmm0
   131 000000EF 49BF00000000000000-         mov r15, two_point_zero         ;put 2.0 in r15
   131 000000F8 40                 
   132 000000F9 4157                        push r15                        ;put r15 on the top of the stack
   133 000000FB F20F5E3424                  divsd xmm6, [rsp]               ;base * height / 2; calculate area of triangle
   134 00000100 415F                        pop r15
   135                                  
   136                                      ;printing area of triangle results
   137 00000102 F20F10C6                    movsd xmm0, xmm6
   138 00000106 B801000000                  mov rax, 1                      ;one float will be printed
   139 0000010B 48BF-                       mov rdi, print_area
   139 0000010D [A000000000000000] 
   140 00000115 E8(00000000)                call printf
   141                                  
   142                                      ;Calculate hypotenuse
   143 0000011A F2450F59C0                  mulsd xmm8, xmm8                ;square side 1
   144 0000011F F2450F59C9                  mulsd xmm9, xmm9                ;square side 2
   145 00000124 F2450F58C1                  addsd xmm8, xmm9                ;add side 1 squared to side 2 squared and store it in xmm8
   146 00000129 F2450F51C0                  sqrtsd xmm8, xmm8               ;calculate square root/hypotenuse
   147                                  
   148                                      ;Printing value of hypotenuse
   149 0000012E F2410F10C0                  movsd xmm0, xmm8                ;place value of hypotenuse in xmm0 to be printed
   150 00000133 B801000000                  mov rax, 1                      ;1 mxx register to be printed
   151 00000138 48BF-                       mov rdi, print_len
   151 0000013A [D200000000000000] 
   152 00000142 E8(00000000)                call printf
   153                                  
   154                                      ;Print enjoy triangles
   155 00000147 48BF-                       mov rdi, string_format
   155 00000149 [1D01000000000000] 
   156 00000151 48BE-                       mov rsi, conclude
   156 00000153 [0001000000000000] 
   157 0000015B E8(00000000)                call printf
   158                                  
   159                                      ;calculates length of "title" string using strlen and stores length in r13 register
   160 00000160 B800000000                  mov qword rax, 0
   161 00000165 48BF-                       mov rdi, title
   161 00000167 [1400000000000000] 
   162 0000016F E8(00000000)                call strlen
   163 00000174 4989C5                      mov r13, rax
   164                                      
   165                                      ;Print title without newline character
   166 00000177 48BF-                       mov rdi, string_format
   166 00000179 [1D01000000000000] 
   167 00000181 48BE-                       mov rsi, title
   167 00000183 [1400000000000000] 
   168 0000018B 42C6442EFF20                mov byte [rsi + r13 - 1], " "           ;replaces newline character with space
   169 00000191 E8(00000000)                call printf
   170                                  
   171                                      ;stores length of "name" array in r13
   172 00000196 48BF-                       mov rdi, name
   172 00000198 [0000000000000000] 
   173 000001A0 E8(00000000)                call strlen
   174 000001A5 4989C5                      mov r13, rax
   175                                  
   176                                      ;print name inline with title
   177 000001A8 48BF-                       mov rdi, string_format
   177 000001AA [1D01000000000000] 
   178 000001B2 48BE-                       mov rsi, name                           ;print name inputted by user
   178 000001B4 [0000000000000000] 
   179 000001BC 42C6442EFF2E                mov byte [rsi + r13 - 1], "."           ;replace newline character with '.'
   180 000001C2 E8(00000000)                call printf
   181                                  
   182 000001C7 F2410F10C0                  movsd xmm0, xmm8            
   183                                      
   184                                  
   185                                  
   186                                  
   187                                      ;epilog: returns stack to state prior to the assembly fuction
   188 000001CC 9D                          popf
   189 000001CD 415F                        pop r15
   190 000001CF 415E                        pop r14
   191 000001D1 415D                        pop r13
   192 000001D3 415C                        pop r12
   193 000001D5 415B                        pop r11
   194 000001D7 415A                        pop r10
   195 000001D9 4159                        pop r9
   196 000001DB 4158                        pop r8
   197 000001DD 5E                          pop rsi
   198 000001DE 5F                          pop rdi
   199 000001DF 5A                          pop rdx
   200 000001E0 59                          pop rcx
   201 000001E1 5B                          pop rbx
   202 000001E2 5D                          pop rbp
   203                                  
   204                                      ;end of assembly function
   205 000001E3 C3                          ret
